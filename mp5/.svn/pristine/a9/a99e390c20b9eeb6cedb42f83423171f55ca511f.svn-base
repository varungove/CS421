/* Use the expression datatype defined in expressions.ml: */
%{
    open Mp5common

(* You may want to add extra code here *)

%}


/* Define the tokens of the language: */
%token <int> INT
%token <float> FLOAT
%token <string> STRING IDENT
%token TRUE FALSE NEG PLUS MINUS TIMES DIV DPLUS DMINUS DTIMES DDIV MOD EXP CARAT
       LT GT LEQ GEQ EQUALS NEQ PIPE ARROW SEMI DSEMI DCOLON NIL
       LET REC AND IN IF THEN ELSE FUN MOD RAISE TRY WITH NOT LOGICALAND
       LOGICALOR LBRAC RBRAC LPAREN RPAREN COMMA UNDERSCORE UNIT
       HEAD TAIL PRINT FST SND EOF

/* Define the "goal" nonterminal of the grammar: */
%start main
%type <Mp5common.dec> main
%left APPLICATION

%%



main:
    expression DSEMI      			   { (Anon ( $1)) }
  | LET IDENT EQUALS expression	DSEMI 	           { (Let ($2,$4)) }
  | LET REC IDENT IDENT EQUALS expression DSEMI    { (LetRec ($3, $4, $6)) }

expression: 

/* You will need to change stuff here, we just have a minimal version so that
   you can successfully do make initially  */

  atomic_expression { $1 }
  |LPAREN expression RPAREN { $2 }
  |LPAREN expression COMMA expression RPAREN { (BinOpAppExp (CommaOp, $2, $4)) }
  |NEG expression  {MonOpAppExp (IntNegOp, $2)}
  |HEAD expression {MonOpAppExp (HdOp, $2)}
  |TAIL expression {MonOpAppExp (TlOp, $2)}
  |FST expression {MonOpAppExp (FstOp, $2)}
  |SND expression {MonOpAppExp (SndOp, $2)}
  | expression PLUS  expression { BinOpAppExp (IntPlusOp, $1, $3) }
  | expression MINUS expression { BinOpAppExp (IntMinusOp, $1, $3) }
  | expression DIV   expression { BinOpAppExp (IntDivOp, $1, $3) }
  | expression TIMES expression { BinOpAppExp (IntTimesOp, $1, $3) }
  | expression DPLUS  expression { BinOpAppExp (FloatPlusOp, $1, $3) }
  | expression DMINUS expression { BinOpAppExp (FloatMinusOp, $1, $3) }
  | expression DDIV   expression { BinOpAppExp (FloatDivOp, $1, $3) }
  | expression DTIMES expression { BinOpAppExp (FloatTimesOp, $1, $3) }
  | expression LT  expression { BinOpAppExp (GreaterOp, $3, $1) }
  | expression GT  expression { BinOpAppExp (GreaterOp, $1, $3) }
  | expression EQUALS  expression { BinOpAppExp (EqOp, $1, $3) }
  | expression LEQ expression { IfExp (BinOpAppExp(GreaterOp, $3, $1), ConstExp(TrueConst), BinOpAppExp(EqOp, $1, $3))  }
  | expression GEQ expression { IfExp (BinOpAppExp(GreaterOp, $1, $3), ConstExp(TrueConst), BinOpAppExp(EqOp, $1, $3))  }
  | expression DCOLON expression {BinOpAppExp(ConsOp, $1, $3)}
  | LET IDENT EQUALS expression IN expression { LetInExp($2, $4, $6)}
  | LET REC IDENT IDENT EQUALS expression IN expression %prec REC { LetRecInExp($3, $4, $6, $8) }
  | expression expression %prec APPLICATION { AppExp($1, $2) }
  | expression LOGICALAND expression {IfExp($1, $3, ConstExp(FalseConst))}
  | expression LOGICALOR expression {IfExp($1, ConstExp(TrueConst), $3)}
  | FUN IDENT ARROW expression { FunExp($2, $4)}
  | IF expression THEN expression ELSE expression { IfExp($2, $4, $6) }
  | RAISE expression { RaiseExp($2)}
  | expression { BinOpAppExp(ConsOp, $1, ConstExp(NilConst)) }
  | expression SEMI expression { BinOpAppExp(ConsOp, $1, $3) }
  

pat:
  | UNDERSCORE	{ None }
  | INT		{ Some $1 }

atomic_expression: /* You may want to change this */
  | IDENT			{ VarExp $1 }
  | INT			{ ConstExp ( IntConst $1) }
  | FLOAT { ConstExp (FloatConst $1) }
  | STRING { ConstExp (StringConst $1) }
  | UNIT { ConstExp UnitConst }
  | TRUE            { ConstExp TrueConst }
  | FALSE            { ConstExp FalseConst }
  | NIL           { ConstExp NilConst }

