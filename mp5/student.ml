type token =
  | INT of (int)
  | FLOAT of (float)
  | STRING of (string)
  | IDENT of (string)
  | TRUE
  | FALSE
  | NEG
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | DPLUS
  | DMINUS
  | DTIMES
  | DDIV
  | MOD
  | EXP
  | CARAT
  | LT
  | GT
  | LEQ
  | GEQ
  | EQUALS
  | NEQ
  | PIPE
  | ARROW
  | SEMI
  | DSEMI
  | DCOLON
  | NIL
  | LET
  | REC
  | AND
  | IN
  | IF
  | THEN
  | ELSE
  | FUN
  | RAISE
  | TRY
  | WITH
  | NOT
  | LOGICALAND
  | LOGICALOR
  | LBRAC
  | RBRAC
  | LPAREN
  | RPAREN
  | COMMA
  | UNDERSCORE
  | UNIT
  | HEAD
  | TAIL
  | PRINT
  | FST
  | SND
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "student.mly"
    open Mp5common

(* You may want to add extra code here *)

# 68 "student.ml"
let yytransl_const = [|
  261 (* TRUE *);
  262 (* FALSE *);
  263 (* NEG *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* TIMES *);
  267 (* DIV *);
  268 (* DPLUS *);
  269 (* DMINUS *);
  270 (* DTIMES *);
  271 (* DDIV *);
  272 (* MOD *);
  273 (* EXP *);
  274 (* CARAT *);
  275 (* LT *);
  276 (* GT *);
  277 (* LEQ *);
  278 (* GEQ *);
  279 (* EQUALS *);
  280 (* NEQ *);
  281 (* PIPE *);
  282 (* ARROW *);
  283 (* SEMI *);
  284 (* DSEMI *);
  285 (* DCOLON *);
  286 (* NIL *);
  287 (* LET *);
  288 (* REC *);
  289 (* AND *);
  290 (* IN *);
  291 (* IF *);
  292 (* THEN *);
  293 (* ELSE *);
  294 (* FUN *);
  295 (* RAISE *);
  296 (* TRY *);
  297 (* WITH *);
  298 (* NOT *);
  299 (* LOGICALAND *);
  300 (* LOGICALOR *);
  301 (* LBRAC *);
  302 (* RBRAC *);
  303 (* LPAREN *);
  304 (* RPAREN *);
  305 (* COMMA *);
  306 (* UNDERSCORE *);
  307 (* UNIT *);
  308 (* HEAD *);
  309 (* TAIL *);
  310 (* PRINT *);
  311 (* FST *);
  312 (* SND *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* STRING *);
  260 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\004\000\004\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\005\000\007\000\001\000\003\000\005\000\002\000\002\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\006\000\008\000\002\000\003\000\003\000\004\000\006\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\037\000\038\000\039\000\036\000\041\000\042\000\
\000\000\043\000\000\000\000\000\000\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\044\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\003\000\000\000\000\000"

let yydgoto = "\002\000\
\021\000\053\000\023\000\000\000"

let yysindex = "\002\000\
\145\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\155\001\000\000\253\254\155\001\000\255\155\001\155\001\000\000\
\155\001\155\001\155\001\155\001\000\000\009\000\000\000\254\254\
\089\001\238\254\002\255\065\000\237\254\089\001\097\255\089\001\
\089\001\089\001\089\001\155\001\155\001\155\001\155\001\155\001\
\155\001\155\001\155\001\155\001\155\001\155\001\155\001\155\001\
\000\000\155\001\155\001\155\001\089\001\242\254\006\255\155\001\
\008\255\155\001\155\001\000\000\155\001\089\001\089\001\089\001\
\089\001\089\001\089\001\089\001\089\001\089\001\089\001\089\001\
\089\001\089\001\089\001\089\001\089\001\155\001\011\255\153\255\
\255\254\121\000\089\001\177\000\233\000\001\255\000\000\155\001\
\155\001\155\001\000\000\155\001\089\001\209\255\089\001\033\001\
\000\000\155\001\089\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\255\000\000\000\000\000\000\000\000\035\255\000\000\181\001\
\185\001\203\001\207\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\225\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\229\001\247\001\251\001\
\013\002\017\002\035\002\039\002\057\002\061\002\079\002\083\002\
\101\002\105\002\123\002\127\002\145\002\000\000\000\000\000\000\
\000\000\000\000\149\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\167\002\000\000\171\002\000\000\
\000\000\000\000\189\002"

let yygindex = "\000\000\
\000\000\255\255\000\000\000\000"

let yytablesize = 1006
let yytable = "\022\000\
\026\000\054\000\001\000\029\000\056\000\057\000\059\000\025\000\
\078\000\079\000\028\000\081\000\030\000\031\000\086\000\032\000\
\033\000\034\000\035\000\000\000\000\000\089\000\000\000\092\000\
\000\000\000\000\000\000\000\000\027\000\055\000\000\000\000\000\
\000\000\000\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\000\000\
\075\000\076\000\077\000\000\000\007\000\000\000\080\000\000\000\
\082\000\083\000\007\000\084\000\007\000\007\000\033\000\000\000\
\000\000\000\000\000\000\000\000\033\000\000\000\033\000\033\000\
\007\000\007\000\000\000\000\000\085\000\000\000\000\000\000\000\
\000\000\000\000\033\000\033\000\000\000\000\000\093\000\094\000\
\095\000\000\000\096\000\000\000\000\000\000\000\000\000\000\000\
\099\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\000\000\000\000\000\000\044\000\045\000\046\000\047\000\048\000\
\000\000\000\000\000\000\000\000\000\000\050\000\010\000\024\000\
\000\000\000\000\000\000\012\000\000\000\000\000\013\000\014\000\
\000\000\000\000\000\000\051\000\052\000\000\000\000\000\015\000\
\060\000\061\000\000\000\016\000\017\000\018\000\000\000\019\000\
\020\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\000\000\000\000\000\000\044\000\045\000\046\000\047\000\048\000\
\000\000\000\000\000\000\000\000\087\000\050\000\010\000\024\000\
\000\000\000\000\088\000\012\000\000\000\000\000\013\000\014\000\
\000\000\000\000\000\000\051\000\052\000\000\000\000\000\015\000\
\000\000\000\000\000\000\016\000\017\000\018\000\000\000\019\000\
\020\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\000\000\000\000\000\000\044\000\045\000\046\000\047\000\048\000\
\000\000\000\000\000\000\000\000\097\000\050\000\010\000\024\000\
\000\000\000\000\098\000\012\000\000\000\000\000\013\000\014\000\
\000\000\000\000\000\000\051\000\052\000\000\000\000\000\015\000\
\000\000\000\000\000\000\016\000\017\000\018\000\000\000\019\000\
\020\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\000\000\000\000\000\000\044\000\045\000\046\000\047\000\048\000\
\000\000\000\000\000\000\000\000\049\000\050\000\010\000\024\000\
\000\000\000\000\000\000\012\000\000\000\000\000\013\000\014\000\
\000\000\000\000\000\000\051\000\052\000\000\000\000\000\015\000\
\000\000\000\000\000\000\016\000\017\000\018\000\000\000\019\000\
\020\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\000\000\000\000\000\000\044\000\045\000\046\000\047\000\048\000\
\000\000\000\000\000\000\000\000\000\000\050\000\010\000\024\000\
\000\000\000\000\000\000\012\000\058\000\000\000\013\000\014\000\
\000\000\000\000\000\000\051\000\052\000\000\000\000\000\015\000\
\000\000\000\000\000\000\016\000\017\000\018\000\000\000\019\000\
\020\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\000\000\000\000\000\000\044\000\045\000\046\000\047\000\048\000\
\000\000\000\000\000\000\000\000\000\000\050\000\010\000\024\000\
\000\000\000\000\000\000\012\000\000\000\090\000\013\000\014\000\
\000\000\000\000\000\000\051\000\052\000\000\000\000\000\015\000\
\000\000\000\000\000\000\016\000\017\000\018\000\000\000\019\000\
\020\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\000\000\000\000\000\000\044\000\045\000\046\000\047\000\048\000\
\000\000\000\000\000\000\000\000\000\000\050\000\010\000\024\000\
\000\000\000\000\000\000\012\000\000\000\000\000\013\000\014\000\
\000\000\000\000\000\000\051\000\052\000\000\000\000\000\015\000\
\091\000\000\000\000\000\016\000\017\000\018\000\000\000\019\000\
\020\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\000\000\000\000\000\000\044\000\045\000\046\000\047\000\048\000\
\000\000\000\000\000\000\000\000\000\000\050\000\010\000\024\000\
\000\000\000\000\088\000\012\000\000\000\000\000\013\000\014\000\
\000\000\000\000\000\000\051\000\052\000\000\000\000\000\015\000\
\000\000\000\000\000\000\016\000\017\000\018\000\000\000\019\000\
\020\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\000\000\000\000\000\000\044\000\045\000\046\000\047\000\048\000\
\000\000\000\000\000\000\000\000\000\000\050\000\010\000\024\000\
\000\000\000\000\098\000\012\000\000\000\000\000\013\000\014\000\
\000\000\000\000\000\000\051\000\052\000\000\000\000\000\015\000\
\000\000\000\000\000\000\016\000\017\000\018\000\000\000\019\000\
\020\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\000\000\000\000\000\000\044\000\045\000\046\000\047\000\048\000\
\000\000\000\000\000\000\000\000\000\000\050\000\010\000\024\000\
\000\000\000\000\000\000\012\000\000\000\000\000\013\000\014\000\
\000\000\000\000\000\000\051\000\052\000\000\000\000\000\015\000\
\000\000\000\000\000\000\016\000\017\000\018\000\000\000\019\000\
\020\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\000\000\000\000\000\000\003\000\004\000\005\000\006\000\007\000\
\008\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\000\011\000\
\000\000\000\000\000\000\012\000\000\000\000\000\013\000\014\000\
\010\000\024\000\000\000\000\000\000\000\012\000\000\000\015\000\
\013\000\014\000\000\000\016\000\017\000\018\000\000\000\019\000\
\020\000\015\000\000\000\000\000\000\000\016\000\017\000\018\000\
\008\000\019\000\020\000\000\000\009\000\000\000\008\000\000\000\
\008\000\008\000\009\000\000\000\009\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\008\000\010\000\000\000\
\009\000\009\000\011\000\000\000\010\000\000\000\010\000\010\000\
\011\000\000\000\011\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\010\000\028\000\000\000\011\000\011\000\
\012\000\000\000\028\000\000\000\028\000\028\000\012\000\000\000\
\012\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\028\000\028\000\013\000\000\000\012\000\012\000\015\000\000\000\
\013\000\000\000\013\000\013\000\015\000\000\000\015\000\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\013\000\
\014\000\000\000\015\000\015\000\016\000\000\000\014\000\000\000\
\014\000\014\000\016\000\000\000\016\000\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\014\000\017\000\000\000\
\016\000\016\000\019\000\000\000\017\000\000\000\017\000\017\000\
\019\000\000\000\019\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\017\000\018\000\000\000\019\000\019\000\
\020\000\000\000\018\000\000\000\018\000\018\000\020\000\000\000\
\020\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\018\000\021\000\000\000\020\000\020\000\023\000\000\000\
\021\000\000\000\021\000\021\000\023\000\000\000\023\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\021\000\
\024\000\000\000\023\000\023\000\022\000\000\000\024\000\000\000\
\024\000\024\000\022\000\000\000\022\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\024\000\025\000\000\000\
\022\000\022\000\029\000\000\000\025\000\000\000\025\000\025\000\
\029\000\000\000\029\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\000\025\000\030\000\000\000\029\000\029\000\
\031\000\000\000\030\000\000\000\030\000\030\000\031\000\000\000\
\031\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\030\000\030\000\026\000\000\000\031\000\031\000\032\000\000\000\
\026\000\000\000\026\000\026\000\032\000\000\000\032\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\027\000\000\000\032\000\032\000\000\000\000\000\027\000\000\000\
\027\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\000\027\000"

let yycheck = "\001\000\
\004\001\004\001\001\000\004\001\023\001\004\001\026\001\009\000\
\023\001\004\001\012\000\004\001\014\000\015\000\004\001\017\000\
\018\000\019\000\020\000\255\255\255\255\023\001\255\255\023\001\
\255\255\255\255\255\255\255\255\032\001\032\001\255\255\255\255\
\255\255\255\255\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\255\255\
\050\000\051\000\052\000\255\255\028\001\255\255\056\000\255\255\
\058\000\059\000\034\001\061\000\036\001\037\001\028\001\255\255\
\255\255\255\255\255\255\255\255\034\001\255\255\036\001\037\001\
\048\001\049\001\255\255\255\255\078\000\255\255\255\255\255\255\
\255\255\255\255\048\001\049\001\255\255\255\255\088\000\089\000\
\090\000\255\255\092\000\255\255\255\255\255\255\255\255\255\255\
\098\000\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\255\255\255\255\255\255\035\001\255\255\255\255\038\001\039\001\
\255\255\255\255\255\255\043\001\044\001\255\255\255\255\047\001\
\048\001\049\001\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\255\255\255\255\034\001\035\001\255\255\255\255\038\001\039\001\
\255\255\255\255\255\255\043\001\044\001\255\255\255\255\047\001\
\255\255\255\255\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\255\255\255\255\034\001\035\001\255\255\255\255\038\001\039\001\
\255\255\255\255\255\255\043\001\044\001\255\255\255\255\047\001\
\255\255\255\255\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\255\255\255\255\255\255\035\001\255\255\255\255\038\001\039\001\
\255\255\255\255\255\255\043\001\044\001\255\255\255\255\047\001\
\255\255\255\255\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\255\255\255\255\255\255\035\001\036\001\255\255\038\001\039\001\
\255\255\255\255\255\255\043\001\044\001\255\255\255\255\047\001\
\255\255\255\255\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\255\255\255\255\255\255\035\001\255\255\037\001\038\001\039\001\
\255\255\255\255\255\255\043\001\044\001\255\255\255\255\047\001\
\255\255\255\255\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\255\255\255\255\255\255\035\001\255\255\255\255\038\001\039\001\
\255\255\255\255\255\255\043\001\044\001\255\255\255\255\047\001\
\048\001\255\255\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\255\255\255\255\034\001\035\001\255\255\255\255\038\001\039\001\
\255\255\255\255\255\255\043\001\044\001\255\255\255\255\047\001\
\255\255\255\255\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\255\255\255\255\034\001\035\001\255\255\255\255\038\001\039\001\
\255\255\255\255\255\255\043\001\044\001\255\255\255\255\047\001\
\255\255\255\255\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\255\255\255\255\255\255\035\001\255\255\255\255\038\001\039\001\
\255\255\255\255\255\255\043\001\044\001\255\255\255\255\047\001\
\255\255\255\255\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\255\255\255\255\255\255\035\001\255\255\255\255\038\001\039\001\
\030\001\031\001\255\255\255\255\255\255\035\001\255\255\047\001\
\038\001\039\001\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\047\001\255\255\255\255\255\255\051\001\052\001\053\001\
\028\001\055\001\056\001\255\255\028\001\255\255\034\001\255\255\
\036\001\037\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\048\001\049\001\028\001\255\255\
\048\001\049\001\028\001\255\255\034\001\255\255\036\001\037\001\
\034\001\255\255\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\048\001\049\001\028\001\255\255\048\001\049\001\
\028\001\255\255\034\001\255\255\036\001\037\001\034\001\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\048\001\049\001\028\001\255\255\048\001\049\001\028\001\255\255\
\034\001\255\255\036\001\037\001\034\001\255\255\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\048\001\049\001\
\028\001\255\255\048\001\049\001\028\001\255\255\034\001\255\255\
\036\001\037\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\048\001\049\001\028\001\255\255\
\048\001\049\001\028\001\255\255\034\001\255\255\036\001\037\001\
\034\001\255\255\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\048\001\049\001\028\001\255\255\048\001\049\001\
\028\001\255\255\034\001\255\255\036\001\037\001\034\001\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\048\001\049\001\028\001\255\255\048\001\049\001\028\001\255\255\
\034\001\255\255\036\001\037\001\034\001\255\255\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\048\001\049\001\
\028\001\255\255\048\001\049\001\028\001\255\255\034\001\255\255\
\036\001\037\001\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\048\001\049\001\028\001\255\255\
\048\001\049\001\028\001\255\255\034\001\255\255\036\001\037\001\
\034\001\255\255\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\048\001\049\001\028\001\255\255\048\001\049\001\
\028\001\255\255\034\001\255\255\036\001\037\001\034\001\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\048\001\049\001\028\001\255\255\048\001\049\001\028\001\255\255\
\034\001\255\255\036\001\037\001\034\001\255\255\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\048\001\049\001\
\028\001\255\255\048\001\049\001\255\255\255\255\034\001\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\048\001\049\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  NEG\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  DPLUS\000\
  DMINUS\000\
  DTIMES\000\
  DDIV\000\
  MOD\000\
  EXP\000\
  CARAT\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  EQUALS\000\
  NEQ\000\
  PIPE\000\
  ARROW\000\
  SEMI\000\
  DSEMI\000\
  DCOLON\000\
  NIL\000\
  LET\000\
  REC\000\
  AND\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FUN\000\
  RAISE\000\
  TRY\000\
  WITH\000\
  NOT\000\
  LOGICALAND\000\
  LOGICALOR\000\
  LBRAC\000\
  RBRAC\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  UNDERSCORE\000\
  UNIT\000\
  HEAD\000\
  TAIL\000\
  PRINT\000\
  FST\000\
  SND\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  STRING\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 30 "student.mly"
                                ( (Anon ( _1)) )
# 526 "student.ml"
               : Mp5common.dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 31 "student.mly"
                                                  ( (Let (_2,_4)) )
# 534 "student.ml"
               : Mp5common.dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 32 "student.mly"
                                                   ( (LetRec (_3, _4, _6)) )
# 543 "student.ml"
               : Mp5common.dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 39 "student.mly"
                    ( _1 )
# 550 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 40 "student.mly"
                            ( _2 )
# 557 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 41 "student.mly"
                                             ( (BinOpAppExp (CommaOp, _2, _4)) )
# 565 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 42 "student.mly"
                   ( MonOpAppExp (IntNegOp, _2) )
# 572 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 43 "student.mly"
                   ( MonOpAppExp (HdOp, _2) )
# 579 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 44 "student.mly"
                   ( MonOpAppExp (TlOp, _2) )
# 586 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 45 "student.mly"
                  ( MonOpAppExp (FstOp, _2) )
# 593 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 46 "student.mly"
                  ( MonOpAppExp (SndOp, _2) )
# 600 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 47 "student.mly"
                               ( BinOpAppExp (IntPlusOp, _1, _3) )
# 608 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 48 "student.mly"
                               ( BinOpAppExp (IntMinusOp, _1, _3) )
# 616 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 49 "student.mly"
                               ( BinOpAppExp (IntDivOp, _1, _3) )
# 624 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 50 "student.mly"
                               ( BinOpAppExp (IntTimesOp, _1, _3) )
# 632 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 51 "student.mly"
                                ( BinOpAppExp (FloatPlusOp, _1, _3) )
# 640 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 52 "student.mly"
                                ( BinOpAppExp (FloatMinusOp, _1, _3) )
# 648 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 53 "student.mly"
                                ( BinOpAppExp (FloatDivOp, _1, _3) )
# 656 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 54 "student.mly"
                                ( BinOpAppExp (FloatTimesOp, _1, _3) )
# 664 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 55 "student.mly"
                             ( BinOpAppExp (GreaterOp, _3, _1) )
# 672 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 56 "student.mly"
                             ( BinOpAppExp (GreaterOp, _1, _3) )
# 680 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 57 "student.mly"
                                 ( BinOpAppExp (EqOp, _1, _3) )
# 688 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 58 "student.mly"
                             ( IfExp (BinOpAppExp(GreaterOp, _3, _1), ConstExp(TrueConst), BinOpAppExp(EqOp, _1, _3))  )
# 696 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 59 "student.mly"
                             ( IfExp (BinOpAppExp(GreaterOp, _1, _3), ConstExp(TrueConst), BinOpAppExp(EqOp, _1, _3))  )
# 704 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 60 "student.mly"
                                (BinOpAppExp(ConsOp, _1, _3))
# 712 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 61 "student.mly"
                                             ( LetInExp(_2, _4, _6))
# 721 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 62 "student.mly"
                                                                 ( LetRecInExp(_3, _4, _6, _8) )
# 731 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 63 "student.mly"
                                           ( AppExp(_1, _2) )
# 739 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 64 "student.mly"
                                    (IfExp(_1, _3, ConstExp(FalseConst)))
# 747 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 65 "student.mly"
                                   (IfExp(_1, ConstExp(TrueConst), _3))
# 755 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 66 "student.mly"
                              ( FunExp(_2, _4))
# 763 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 67 "student.mly"
                                                 ( IfExp(_2, _4, _6) )
# 772 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 68 "student.mly"
                    ( RaiseExp(_2))
# 779 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "student.mly"
               ( None )
# 785 "student.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 74 "student.mly"
         ( Some _1 )
# 792 "student.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "student.mly"
            ( VarExp _1 )
# 799 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 78 "student.mly"
          ( ConstExp ( IntConst _1) )
# 806 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 79 "student.mly"
          ( ConstExp (FloatConst _1) )
# 813 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "student.mly"
           ( ConstExp (StringConst _1) )
# 820 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "student.mly"
         ( ConstExp UnitConst )
# 826 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "student.mly"
                    ( ConstExp TrueConst )
# 832 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "student.mly"
                     ( ConstExp FalseConst )
# 838 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "student.mly"
                  ( ConstExp NilConst )
# 844 "student.ml"
               : 'atomic_expression))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Mp5common.dec)
